name: CI
on: [push, pull_request]
jobs:
  check:
    if: ${{ github.event_name == 'pull_request' }}
    name: HAProxy check commit message
    runs-on: ubuntu-latest
    steps:
      - name: commit-check
        uses: docker://ghcr.io/haproxytech/commit-check:3.0.1
        env:
          API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  tidy:
    name: go mod tidy
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: tidy
        run: go mod tidy
      - name: changes
        run: test -z "$(git diff 2> /dev/null)" || exit "Go modules not tidied, issue \`go mod tidy\` and commit the result"
  gofumpt:
    name: gofumpt
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Task
        uses: arduino/setup-task@v1
      - name: tidy
        run: task format
      - name: changes
        run: test -z "$(git diff 2> /dev/null)" || exit "Go code not formatted, issue \`task format\` and commit the result"
  lint:
    name: golangci-lint
    needs: ["tidy"]
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          check-latest: true
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install Task
        uses: arduino/setup-task@v1
      - name: Lint
        run: |
          task lint
  build:
    name: build
    runs-on: ubuntu-latest
    needs: ["lint"]
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        check-latest: true
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Get dependencies
      run: |
        go get -v -t -d ./...
    - name: Build
      run: |
        go build -v .
  licenses:
    name: licence check
    runs-on: ubuntu-latest
    needs: ["lint"]
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version-file: 'go.mod'
        check-latest: true
    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: install go-licenses
      run: |
        go install github.com/google/go-licenses@latest
    - name: Check
      run: |
        go run .
